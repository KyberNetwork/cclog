name: Build and Test
on:
  push:
    branches:
      - master
      - staging
      - develop
  pull_request:

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go
        uses: actions/setup-go@v1
        with:
          go-version: 1.19

      - name: Check out code
        uses: actions/checkout@v1
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v2
        with:
          version: v1.46.2
          args: --config=.golangci.yml
          skip-pkg-cache: true
          skip-build-cache: true

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go
        uses: actions/setup-go@v1
        with:
          go-version: 1.19

      - name: Check out code
        uses: actions/checkout@v1

      - name: Run Unit tests.
        run: go test -v ./...

  docker:
    name: Docker
    runs-on: [ ubuntu-22.04 ]
    needs: [ prepare, lint, test ]
    env:
      SERVICE: cclog
      BRANCH_TAG: ${{ needs.prepare.outputs.current_branch }}
      COMMIT_TAG: ${{ needs.prepare.outputs.commit_tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Prepare images
        id: images
        shell: bash
        env:
          COMMIT_TAG: ${{ needs.prepare.outputs.commit_tag }}
          VERSION_TAG: ${{ needs.prepare.outputs.version_tag }}
          BRANCH_TAG: ${{ needs.prepare.outputs.current_branch }}
        run: |
          DOCKER_REPO="kybernetwork/$SERVICE"

          COMBINE_TAG="$DOCKER_REPO:$BRANCH_TAG-$COMMIT_TAG"
          echo "::set-output name=combine::$COMBINE_TAG"

          IMAGE_WITH_BRANCH_TAG="$DOCKER_REPO:$BRANCH_TAG"
          echo "::set-output name=branch::$IMAGE_WITH_BRANCH_TAG"

          [[ -n "$VERSION_TAG" ]] || exit 0
          IMAGE_WITH_VERSION_TAG="$DOCKER_REPO:$VERSION_TAG"
          echo "::set-output name=version::$IMAGE_WITH_VERSION_TAG"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@master
        if: github.event_name != 'pull_request'
      - name: Docker login
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
        if: github.event_name != 'pull_request'

      - name: Gcloud Auth
        uses: google-github-actions/auth@v0
        with:
          credentials_json: '${{ secrets.GCR_CREDENTIALS }}'

      - name: Setup Gcloud SDK
        uses: google-github-actions/setup-gcloud@v0

      - name: Configure docker
        run: gcloud auth configure-docker

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-${{ env.SERVICE }}-buildx
        if: github.event_name != 'pull_request'

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          labels: |
            commit=${{ github.sha }}
          tags: |
            ${{ needs.prepare.outputs.image_name }}:${{ needs.prepare.outputs.image_tag }}
            ${{ needs.prepare.outputs.image_name }}:${{ needs.prepare.outputs.branch_tag }}
            ${{ steps.images.outputs.branch }}
            ${{ steps.images.outputs.combine }}
            ${{ steps.images.outputs.version }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
        if: github.event_name != 'pull_request'

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
        if: github.event_name != 'pull_request'